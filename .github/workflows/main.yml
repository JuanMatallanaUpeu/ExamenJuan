name: CI/CD ‚Äì Micro Product Deploy

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_PROJECT_NAME: product_app
  APP_CONTAINER_NAME: product_app_2025
  SONAR_PROJECT_KEY: product-app
  SONAR_HOST_URL: http://localhost:9000
  SONAR_TOKEN: squ_81953b828f2e31bea2224831d9c021d43af143f2

jobs:
  build_analyze_deploy:
    runs-on: self-hosted

    steps:
      - name: üì• Checkout del c√≥digo
        uses: actions/checkout@v4

      - name: ‚òï Configurar Java 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      - name: ‚öô Construir el .jar con Maven
        run: mvn clean package -DskipTests

      - name: üìä An√°lisis con SonarQube
        run: |
          echo "‚è≥ Esperando que SonarQube est√© disponible..."
          until curl -sSf ${{ env.SONAR_HOST_URL }} > /dev/null; do
            echo "‚ùó SonarQube no est√° disponible a√∫n. Reintentando..."
            sleep 5
          done

          echo "‚úÖ SonarQube disponible. Ejecutando an√°lisis..."
          mvn verify sonar:sonar \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.login=${{ env.SONAR_TOKEN }}

      - name: üöÄ Despliegue con Docker Compose
        run: |
          echo "üîß Desplegando aplicaci√≥n con Docker..."
          cd docker
          docker-compose -p $DOCKER_PROJECT_NAME down -v --remove-orphans || true
          docker-compose -p $DOCKER_PROJECT_NAME up -d --build
          echo "üìã Logs recientes del contenedor:"
          docker logs --tail 50 $APP_CONTAINER_NAME
